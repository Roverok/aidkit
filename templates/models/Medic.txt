<?php 

use Illuminate\Auth\UserInterface;

class Medic extends AidkitModel implements UserInterface {

	/**
	 * What columns should be guarded
	 *
	 * @var string
	 */
	protected $guarded = array();

	/**
	 * The table associated with the model.
	 *
	 * @var string
	 */
	protected $table = 'medics';

	/**
	 * Indicates if the model should soft delete.
	 *
	 * @var bool
	 */
	protected $softDelete = true;

	/**
	 * Object name used by the Actionlog
	 *
	 * @var bool
	 */
	public static $actionlogObjectName = 'Aidkit Medic';

	/**
	 * Column used for composing Actionlog messages
	 *
	 * @var bool
	 */
	public static $actionlogField = 'username';

	/**
	 * A set of validationrules used when hitting the Database
	 *
	 * @var array
	 */
	public static $rules = array(
		'username' 	=> 'required|alpha_num|unique:medics,username,@id',
		'name'		=> 'required',
		'email'		=> 'required|email|unique:medics,email,@id',
		'password'	=> 'required'
	);

	/**
	 * Check if the current user has the correct accesslevel
	 *
	 * @param int $role
	 *
	 * @return bool
	 */
	public function hasAccessTo($role)
	{
		if($this->role <= $role)
			return true;
		else
			return false;
	}

	/**
	 * Add a hashed Version of the password to the Modelattributes
	 *
	 * @param string $password
	 *
	 * @return void
	 */
	public function setPassword($password)
	{
		$this->attributes['password'] = Hash::make($password);
	}


	/**
	 * Get the title for the role of the current user
	 *
	 * @return string
	 */
	public function getRoletitle()
	{
		$roles = Config::get('aidkit::config.roles');

		return $roles[$this->role]['title'];
	}

	/**
	 * Get the username for the user
	 *
	 * @return mixed
	 */
	public function getUsername()
	{
		return $this->username;
	}

	/**
	 * Get the unique identifier for the user.
	 *
	 * @return mixed
	 */
	public function getAuthIdentifier()
	{
		return $this->getKey();
	}

	/**
	 * Get the password for the user.
	 *
	 * @return string
	 */
	public function getAuthPassword()
	{
		return $this->password;
	}



}